name: Export Keynote to PDF

on:
  push:
    branches:
      - main
    paths:
      - "**/*.key"
      - ".github/workflows/export-keynote.yml"
  workflow_dispatch:
    inputs:
      keynote_glob:
        description: 'Glob for .key files (default **/*.key)'
        required: false
        default: '**/*.key'

jobs:
  export:
    runs-on: [self-hosted, macOS]
    environment: export-keynote

    env:
      # You can override this at dispatch time with the input above
      KEYNOTE_GLOB: ${{ github.event.inputs.keynote_glob || '**/*.key' }}
      OUT_DIR: out-pdf
      TARGET_PDF: cmsc430-2025-fall.pdf

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Verify Keynote is installed
        shell: bash
        run: |
          if ! osascript -e 'id of app "Keynote"' >/dev/null 2>&1; then
            echo "Keynote.app not found on this runner. Install from the Mac App Store."
            exit 1
          fi

      - name: Prepare output directory
        shell: bash
        run: |
          rm -rf "$OUT_DIR"
          mkdir -p "$OUT_DIR"

      - name: Find Keynote files
        id: find_keys
        shell: bash
        run: |
          # Fall back to simple find since bash 3.2 is ancient on macOS
          files=$(find . -type f -name "*.key")
          if [ -z "$files" ]; then
            echo "No .key files found."
            exit 1
          fi
          echo "Found Keynote files:"
          echo "$files"
          # Save list for next step
          printf "%s\n" $files > keynote_files.txt

      - name: Export all Keynote files to PDF
        shell: bash
        run: |
          APPLESCRIPT='
          on run argv
            set srcPosix to item 1 of argv
            set dstPosix to item 2 of argv
            set srcAlias to POSIX file srcPosix as alias
            tell application "Keynote"
              activate
              set theDoc to open srcAlias
              try
                export theDoc to (POSIX file dstPosix) as PDF
              on error errMsg number errNum
                try
                  close theDoc saving no
                end try
                error errMsg number errNum
              end try
              close theDoc saving no
            end tell
          end run
          '
          while read keyfile; do
            [ -z "$keyfile" ] && continue
            base="$(basename "${keyfile%.key}")"
            out="$OUT_DIR/$base.pdf"
            echo "Exporting: $keyfile -> $out"
            mkdir -p "$(dirname "$out")"
            osascript -e "$APPLESCRIPT" "$PWD/$keyfile" "$PWD/$out"
          done < keynote_files.txt

      - name: Upload PDFs
        uses: actions/upload-artifact@v4
        with:
          name: Keynote-PDFs
          path: ${{ env.OUT_DIR }}/*.pdf
          if-no-files-found: error

      - name: Publish PDFs to pdfs branch
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="pdfs"
          DEST_DIR="."
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          # Ensure we can reference the branch (create if missing)
          git fetch origin "${BRANCH}:${BRANCH}" || true
          # Use a worktree so we don't disturb the main checkout
          if git show-ref --verify --quiet "refs/heads/${BRANCH}"; then
            git worktree add _pdfs "${BRANCH}"
          else
            # Create an orphan branch with an empty tree
            git worktree add -b "${BRANCH}" _pdfs
            (cd _pdfs && git commit --allow-empty -m "Initialize ${BRANCH} branch")
          fi
          # Copy PDFs into the worktree
          mkdir -p "_pdfs/${DEST_DIR}"
          cp -f "$OUT_DIR/$TARGET_PDF" "./$TARGET_PDF"
          # Commit only if there are changes
          cd _pdfs
          git add "$TARGET_PDF"
          if git diff --cached --quiet; then
            echo "No PDF changes to commit."
          else
            git commit -m "Update PDFs from ${GITHUB_SHA}"
            git push origin "${BRANCH}"
          fi
          # Cleanup worktree
          cd ..
          git worktree remove _pdfs --force
